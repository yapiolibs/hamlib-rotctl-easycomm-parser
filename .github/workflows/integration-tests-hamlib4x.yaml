name: Hamlib v4.x integration tests

on:
  push:
    paths:
      - "**"
      - "!**.md"
      - "!**LICENSE"
      - "!**.gitignore"
      - "!**.clang-format"
      - "!library.json"
      - "!.github/workflows/**.yaml"
      - ".github/workflows/integration-tests-hamlib4x.yaml"
  pull_request:
    paths:
      - "**"
      - "!**.md"
      - "!**LICENSE"
      - "!**.gitignore"
      - "!**.clang-format"
      - "!library.json"
      - "!.github/workflows/**.yaml"
      - ".github/workflows/integration-tests-hamlib4x.yaml"

jobs:
  integration-tests:
    name: Hamlib v-${{ matrix.hamlib-version }} integration tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        hamlib-version: ["master", "4.4", "4.3", "4.2", "4.1", "4.0"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Cache Hamlib
      uses: actions/cache@v3
      id: hamlib-cache
      with:
        path: ~/hamlib-src
        key: ${{ runner.os }}-hamlib-version-${{ matrix.hamlib-version }}

    - name: Checkout Hamlib source
      if: steps.hamlib-cache.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch ${{ matrix.hamlib-version }} https://github.com/Hamlib/Hamlib.git ~/hamlib-src

    - name: Install Hamlib v-${{ matrix.hamlib-version }} build tools
      run: |
        sudo apt install -y make build-essential autoconf automake libtool shtool pkg-config libusb-1.0-0-dev

    - name: Configure Hamlib v-${{ matrix.hamlib-version }}
      if: steps.hamlib-cache.outputs.cache-hit != 'true'
      run: |
        cd ~/hamlib-src
        ./bootstrap
        ./configure
      continue-on-error: true

    - name: Build Hamlib v-${{ matrix.hamlib-version }}
      if: steps.hamlib-cache.outputs.cache-hit != 'true'
      run: |
        cd ~/hamlib-src
        make

    - name: Install Hamlib v-${{ matrix.hamlib-version }}
      run: |
        cd ~/hamlib-src
        sudo make install
        sudo ldconfig

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install socat
      run: |
        sudo apt install -y socat

    - name: Integration tests
      run: |
        cd test
        platformio run -e native -t integrationci
